import{r as k,d as C,u as _,a as L,o as v,c as I,e as u,f as T,g as q,n as E,h as y,w as O}from"./index.97bff0c1.js";Object.freeze({__proto__:null});var g={library:"https://accounts.google.com/gsi/client",defaultButtonConfig:{theme:"outline",size:"large"},scopes:"email profile openid"};const l=k({clientId:null,popupType:"CODE",prompt:!1,autoLogin:!1,idConfiguration:null,buttonConfig:g.defaultButtonConfig,callback:()=>{},error:null}),s=k({apiLoaded:!1,apiLoadIntitited:!1}),P=e=>{try{const i=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),t=decodeURIComponent(atob(i).split("").map(function(n){return"%"+("00"+n.charCodeAt(0).toString(16)).slice(-2)}).join(""));return JSON.parse(t)}catch{throw"JWT provided is invalid"}},h=new Promise(e=>{const i=typeof window!="undefined";if(!s.apiLoadIntitited&&i){const t=document.createElement("script");s.apiLoadIntitited=!0,t.addEventListener("load",()=>{s.apiLoaded=!0,e(window.google)}),t.src=g.library,t.async=!0,t.defer=!0,document.head.appendChild(t)}}),f=e=>{s.apiLoadIntitited?s.apiLoaded?e(window.google):O(()=>s.apiLoaded,i=>{i&&e(window.google)}):h.then(i=>{e(i)})},N=(e,i,t,n)=>{if(!e.client_id)throw new Error("Prop client id required since plugin is not initialized with a client id");f(()=>{((o,p,d,a,c)=>{if(c){const w=o.callback;o.callback=m=>{m.credential?w&&w(m):c(m)}}window.google.accounts.id.initialize(o);const r=p.value;r&&!a&&window.google.accounts.id.renderButton(r,d)})(e,i,t.buttonConfig,n,t.error),t.prompt&&z({clientId:t.clientId,callback:t.callback,error:t.error,autoLogin:t.autoLogin})})},S=e=>new Promise((i,t)=>{f(n=>{if(!(e&&e.clientId||l.clientId))throw new Error("clientId is required since the plugin is not initialized with a Client Id");n.accounts.oauth2.initCodeClient({client_id:e&&e.clientId||l.clientId||"",scope:g.scopes,ux_mode:"popup",callback:o=>{o.code?i(o):t(o)}}).requestCode()})}),x=e=>new Promise((i,t)=>{f(n=>{if(!(e&&e.clientId||l.clientId))throw new Error("clientId is required since the plugin is not initialized with a Client Id");n.accounts.oauth2.initTokenClient({client_id:e&&e.clientId||l.clientId||"",scope:g.scopes,callback:o=>{o.access_token?i(o):t(o)}}).requestAccessToken()})}),z=e=>{if(!e&&(e={}),!e.clientId&&!l.clientId)throw new Error("clientId is required");const i={};return e.clientId&&(i.client_id=e.clientId),!e.clientId&&l.clientId&&(i.client_id=l.clientId),e.context&&(i.context=e.context),e.autoLogin!=null&&(i.auto_select=e.autoLogin),e.cancelOnTapOutside!=null&&(i.cancel_on_tap_outside=e.cancelOnTapOutside),new Promise((t,n)=>{i.callback=o=>{e&&e.callback&&e.callback(o),o.credential?t(o):n(o)},f(o=>{o.accounts.id.initialize(i),o.accounts.id.prompt(p=>{e&&e.onNotification&&e.onNotification(p),(d=>{const a=d.notification;let c="";a.isNotDisplayed()&&(c=a.getNotDisplayedReason()==="suppressed_by_user"?"Prompt was suppressed by user'. Refer https://developers.google.com/identity/gsi/web/guides/features#exponential_cooldown for more info":`Prompt was not displayed, reason for not displaying: ${a.getNotDisplayedReason()}`),a.isSkippedMoment()&&(c=`Prompt was skipped, reason for skipping: ${a.getSkippedReason()}`),c.length&&(d.error?d.error(c):d.reject(c))})({notification:p,reject:n,error:e&&e.error})})})})};var b=C({name:"GoogleLogin",props:{clientId:{type:String,required:!1},prompt:{type:Boolean,required:!1,default:!1},autoLogin:{type:Boolean,required:!1,default:!1},popupType:{type:String,required:!1,default:"CODE"},idConfiguration:{type:Object,required:!1},buttonConfig:{type:Object,required:!1},callback:{type:Function,required:!1},error:{type:Function,required:!1}},setup(e){const i=e,t=!!_().default,n=((d,a)=>{const c={...d};for(const r in a)a[r]!==void 0&&a[r]!==null&&(c[r]=a[r]);return c})(l,i),o={client_id:n.clientId||null,auto_select:n.autoLogin||!1,callback:n.callback,...n.idConfiguration},p=L();return v(()=>{N(o,p,n,t)}),(d,a)=>(y(),I("div",{class:E(["g-btn-wrapper",[!u(s).apiLoaded&&"api-loading"]]),onClick:a[0]||(a[0]=c=>u(t)&&void(u(n).popupType==="TOKEN"?x({clientId:n.clientId}).then(r=>{n.callback&&n.callback(r)}):S({clientId:n.clientId}).then(r=>{n.callback&&n.callback(r)})))},[u(t)?T("v-if",!0):(y(),I("span",{key:0,ref_key:"buttonRef",ref:p,class:"g-btn"},null,512)),q(d.$slots,"default")],2))}});(function(e,i){i===void 0&&(i={});var t=i.insertAt;if(e&&typeof document!="undefined"){var n=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css",t==="top"&&n.firstChild?n.insertBefore(o,n.firstChild):n.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}})(`
.g-btn-wrapper[data-v-5e610566] {
  display: inline-block;
}
.g-btn-wrapper.api-loading[data-v-5e610566] {
  opacity: 0.5;
  pointer-events: none;
}
`),b.__scopeId="data-v-5e610566",b.__file="src/plugin/GoogleLogin.vue";var j={install:(e,i)=>{i&&(t=>{t.clientId&&(l.clientId=t.clientId),t.popupType&&(l.popupType=t.popupType),t.prompt!=null&&(l.prompt=t.prompt),t.autoLogin!=null&&(l.autoLogin=t.autoLogin),t.idConfiguration&&(l.idConfiguration=t.idConfiguration),t.buttonConfig&&(l.buttonConfig=t.buttonConfig),t.callback&&(l.callback=t.callback)})(i),h.then(()=>{if(i.clientId){const t={client_id:i.clientId,auto_select:i.autoLogin===!0,callback:i.callback,...i.idConfiguration};window.google.accounts.id.initialize(t),i.prompt&&window.google.accounts.id.prompt()}}),e.component("GoogleLogin",b)}};export{P as m,j as v};
